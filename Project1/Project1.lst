Microsoft (R) Macro Assembler Version 14.37.32824.0	    01/08/24 17:27:24
test.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				PrintCarProc PROTO,
					pos:COORD 
				CrashTest PROTO, 
					obstaclePos: COORD,

 = 00000008			carWidth = 8
 = 00000001			roadWidth = 1
 = 00000050			graphWidth = 80

 00000000			.data
 00000000 0014 0003		pagePos COORD <20, 3>		; position of cursor
 00000004 2E 2C 2C 2C 2C	list BYTE ".,,,,,,,,,,.,,,,,,,,,,,,,*,,,**,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"
	   2C 2C 2C 2C 2C
	   2C 2E 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2A 2C 2C 2C 2A
	   2A 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
 00000054  2C 2C 2C 2C 2E		 BYTE ",,,,.,,,,,,,,,,,,,,,.,,,,,,,,,,,,,,,,**,,,,,,..,..,,,,,,,,,..,..,,,,,,,,,,,,,,,,"
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2E 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2A 2A 2C
	   2C 2C 2C 2C 2C
	   2E 2E 2C 2E 2E
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2E
	   2E 2C 2E 2E 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
 000000A4  2E 2E 2E 2E 2E		 BYTE "..........,,,,,,,,,,,,,,...,.,.,,.,,,,,,,,,,,..,..,,,,,,,,,,,.......,,,,,,,,,,,,"
	   2E 2E 2E 2E 2E
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2E
	   2E 2E 2C 2E 2C
	   2E 2C 2C 2E 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2E 2E 2C 2E 2E
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2E 2E 2E 2E
	   2E 2E 2E 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
 000000F4  2E 2E 2E 2E 2E		 BYTE "..................,..,,,,,,,,,,,,...,,.,,,,,...,,,,,,,,,,,,......,,,,,,,,,,,,,,,"
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2C 2E
	   2E 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2E 2E
	   2E 2C 2C 2E 2C
	   2C 2C 2C 2C 2E
	   2E 2E 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2E
	   2E 2E 2E 2E 2E
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
 00000144  2E 2E 2E 2E 20		 BYTE ".... ............ .......,,,,,,,,,,,,*((%%%%(,,,,,,,,,,,,,.......,,,,,,,,,,,,,,,"
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 20 2E 2E
	   2E 2E 2E 2E 2E
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2A 28 28
	   25 25 25 25 28
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2E 2E
	   2E 2E 2E 2E 2E
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
 00000194  2E 2E 2E 2E 2E		 BYTE ".........................,,.......,(%&%%%%%%%%%,.....,,,........,,..,,,,,,,,,,,,"
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2C 2C 2E 2E 2E
	   2E 2E 2E 2E 2C
	   28 25 26 25 25
	   25 25 25 25 25
	   25 25 2C 2E 2E
	   2E 2E 2E 2C 2C
	   2C 2E 2E 2E 2E
	   2E 2E 2E 2E 2C
	   2C 2E 2E 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
 000001E4  2E 2E 2E 2E 2E		 BYTE "............. .....  ............,%%((/////**/%*,...,,,,,,,....,,,...,,,,,,,,,,,"
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 2E
	   2E 2E 2E 2E 20
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2C 25
	   25 28 28 2F 2F
	   2F 2F 2F 2A 2A
	   2F 25 2A 2C 2E
	   2E 2E 2C 2C 2C
	   2C 2C 2C 2C 2E
	   2E 2E 2E 2C 2C
	   2C 2E 2E 2E 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
 00000234  2E 2E 2E 2E 2E		 BYTE "............  ... .......,.,.....,%%((((//(///%,....,,,,,,,,,..,,......,,,,,,,,,"
	   2E 2E 2E 2E 2E
	   2E 2E 20 20 2E
	   2E 2E 20 2E 2E
	   2E 2E 2E 2E 2E
	   2C 2E 2C 2E 2E
	   2E 2E 2E 2C 25
	   25 28 28 28 28
	   2F 2F 28 2F 2F
	   2F 25 2C 2E 2E
	   2E 2E 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2E 2E 2C 2C
	   2E 2E 2E 2E 2E
	   2E 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
 00000284  2E 2E 2E 2E 2E		 BYTE "......... .................,,,..,,(((((((////*/%.,,,,,,..,,,,,,,,,,.....,,,,,,,,"
	   2E 2E 2E 2E 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2C 2C 2C
	   2E 2E 2C 2C 28
	   28 28 28 28 28
	   28 2F 2F 2F 2F
	   2A 2F 25 2E 2C
	   2C 2C 2C 2C 2C
	   2E 2E 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2E 2E 2E
	   2E 2E 2C 2C 2C
	   2C 2C 2C 2C 2C
 000002D4  2E 2E 2E 2E 20		 BYTE "....   .   .........      ...,,,,,((((((((/////,,,,,,......,,,,,,,,.  .....,,,,,"
	   20 20 2E 20 20
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   20 20 20 20 20
	   20 2E 2E 2E 2C
	   2C 2C 2C 2C 28
	   28 28 28 28 28
	   28 28 2F 2F 2F
	   2F 2F 2C 2C 2C
	   2C 2C 2C 2E 2E
	   2E 2E 2E 2E 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2E 20 20
	   2E 2E 2E 2E 2E
	   2C 2C 2C 2C 2C
 00000324  20 20 20 2E 20		 BYTE "   . .......................,,,,,,,,/(((%/%///,,,,,,,,,,,,,,,,,,,,,,,..,,,,,,,,,"
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2F 28 28 28
	   25 2F 25 2F 2F
	   2F 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2E
	   2E 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
 00000374  20 2E 20 20 20	 	 BYTE " .       ..........  .     ..,,,,,,%/%(((/%%%/,,,,............,,,,,,,........,,,"
	   20 20 20 20 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   20 2E 20 20 20
	   20 20 2E 2E 2C
	   2C 2C 2C 2C 2C
	   25 2F 25 28 28
	   28 2F 25 25 25
	   2F 2C 2C 2C 2C
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2C 2C 2C
	   2C 2C 2C 2C 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2C 2C 2C
 000003C4  20 20 20 20 20	 	 BYTE "        ......... ....  .....,*(%&&&/%%%%%(%%(%%%,,,,....,....,,,,,,,,,.....,,,,"
	   20 20 20 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 20 2E 2E
	   2E 2E 20 20 2E
	   2E 2E 2E 2E 2C
	   2A 28 25 26 26
	   26 2F 25 25 25
	   25 25 28 25 25
	   28 25 25 25 2C
	   2C 2C 2C 2E 2E
	   2E 2E 2C 2E 2E
	   2E 2E 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2E 2E 2E 2E
	   2E 2C 2C 2C 2C
 00000414  20 2E 2E 2E 2E		 BYTE " ........................,(%&&&&&&&&&/,(/(%**,,&%&&&&&&,*/****,,,,.,,,,,,,,,,,,,"
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2C 28 25 26 26
	   26 26 26 26 26
	   26 26 2F 2C 28
	   2F 28 25 2A 2A
	   2C 2C 26 25 26
	   26 26 26 26 26
	   2C 2A 2F 2A 2A
	   2A 2A 2C 2C 2C
	   2C 2E 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
 00000464  20 2E 20 2E 2E		 BYTE " . ..... . ..,,,....,./&&&&&&&&%%&&&&%/*,/(**,,%%&&&&%&%%,,,,..,,,....,,,,,,...."
	   2E 2E 2E 20 2E
	   20 2E 2E 2C 2C
	   2C 2E 2E 2E 2E
	   2C 2E 2F 26 26
	   26 26 26 26 26
	   26 25 25 26 26
	   26 26 25 2F 2A
	   2C 2F 28 2A 2A
	   2C 2C 25 25 26
	   26 26 26 25 26
	   25 25 2C 2C 2C
	   2C 2E 2E 2C 2C
	   2C 2E 2E 2E 2E
	   2C 2C 2C 2C 2C
	   2C 2E 2E 2E 2E
 000004B4  2E 20 2E 2E 2E		 BYTE ". .....  . .,,,,.,..,,%&&&&&&&%/(%&&&&%%/****(&&%&&&&&&&%,,,...,,,.....,,,,,.,.."
	   2E 2E 20 20 2E
	   20 2E 2C 2C 2C
	   2C 2E 2C 2E 2E
	   2C 2C 25 26 26
	   26 26 26 26 26
	   25 2F 28 25 26
	   26 26 26 25 25
	   2F 2A 2A 2A 2A
	   28 26 26 25 26
	   26 26 26 26 26
	   26 25 2C 2C 2C
	   2E 2E 2E 2C 2C
	   2C 2E 2E 2E 2E
	   2E 2C 2C 2C 2C
	   2C 2E 2C 2E 2E
 00000504  2E 2E 2E 2E 2E		 BYTE "......... .,,,,.....,,%&&&&&&&(%%////&&/****/(&&&&&&&&&&&,,.,,.,,,,...,,,,,,,,.."
	   2E 2E 2E 2E 20
	   2E 2C 2C 2C 2C
	   2E 2E 2E 2E 2E
	   2C 2C 25 26 26
	   26 26 26 26 26
	   28 25 25 2F 2F
	   2F 2F 26 26 2F
	   2A 2A 2A 2A 2F
	   28 26 26 26 26
	   26 26 26 26 26
	   26 26 2C 2C 2E
	   2C 2C 2E 2C 2C
	   2C 2C 2E 2E 2E
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2E 2E
 00000554  2E 2E 20 20 20		 BYTE "..     ..,,,,,,,,,****(&&&&&&&%%%%(/(&&*****&@&&&&&&&&&&&,,,....,,,,,,,,..,,,,,,"
	   20 20 2E 2E 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2A 2A
	   2A 2A 28 26 26
	   26 26 26 26 26
	   25 25 25 25 28
	   2F 28 26 26 2A
	   2A 2A 2A 2A 26
	   40 26 26 26 26
	   26 26 26 26 26
	   26 26 2C 2C 2C
	   2E 2E 2E 2E 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2E 2E 2C
	   2C 2C 2C 2C 2C
 000005A4  2E 20 20 20 20		 BYTE ".      ..,,,,,.,,,,,,/%%&&&&@&%%%(%&&&&&/(%(%&&&&&&&&&&&&,......,,,,,.,......,,,"
	   20 20 2E 2E 2C
	   2C 2C 2C 2C 2E
	   2C 2C 2C 2C 2C
	   2C 2F 25 25 26
	   26 26 26 40 26
	   25 25 25 28 25
	   26 26 26 26 26
	   2F 28 25 28 25
	   26 26 26 26 26
	   26 26 26 26 26
	   26 26 2C 2E 2E
	   2E 2E 2E 2E 2C
	   2C 2C 2C 2C 2E
	   2C 2E 2E 2E 2E
	   2E 2E 2C 2C 2C
 000005F4  20 20 20 20 20		 BYTE "       ...,,,,,,,,,,/%%&&&&%%&&%%(&&&&&&%%%((@&&&&&&&&&&&,,,,...,,,,...,,,,,,,,,"
	   20 20 2E 2E 2E
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2F 25 25 26 26
	   26 26 25 25 26
	   26 25 25 28 26
	   26 26 26 26 26
	   25 25 25 28 28
	   40 26 26 26 26
	   26 26 26 26 26
	   26 26 2C 2C 2C
	   2C 2E 2E 2E 2C
	   2C 2C 2C 2E 2E
	   2E 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
 00000644  20 20 20 20 2E		 BYTE "    .  ...,,,,,,,,,,%%%%%&%&&&%%&@&&&&&&%%(&@&&&&&&&&@@&&,,,,,,,,,,....,,,.,,,,,"
	   20 20 2E 2E 2E
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   25 25 25 25 25
	   26 25 26 26 26
	   25 25 26 40 26
	   26 26 26 26 26
	   25 25 28 26 40
	   26 26 26 26 26
	   26 26 26 40 40
	   26 26 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2E 2E 2E
	   2E 2C 2C 2C 2E
	   2C 2C 2C 2C 2C
 00000694  2E 2E 2E 2E 2E		 BYTE ".........,,*,,,,,,,,%&&&&&@@(@&&&@@&&&&&%((&@@&&&&&@&&&%,,,,,,,,,*,,,,,,,,,,,,,,"
	   2E 2E 2E 2E 2C
	   2C 2A 2C 2C 2C
	   2C 2C 2C 2C 2C
	   25 26 26 26 26
	   26 40 40 28 40
	   26 26 26 40 40
	   26 26 26 26 26
	   25 28 28 26 40
	   40 26 26 26 26
	   26 40 26 26 26
	   25 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2A 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
 000006E4  2E 2E 2E 2E 2E		 BYTE "......,.,,,**,,,,,,(&@@&@@@@@@@@@@@@@&&&%%(%@&@&&&@&&&&,,,,,,,,,,,,,,,,,,,,,,,,,"
	   2E 2C 2E 2C 2C
	   2C 2A 2A 2C 2C
	   2C 2C 2C 2C 28
	   26 40 40 26 40
	   40 40 40 40 40
	   40 40 40 40 40
	   40 40 26 26 26
	   25 25 28 25 40
	   26 40 26 26 26
	   40 26 26 26 26
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
 00000734  2E 2E 2E 2C 2C		 BYTE "...,,,,,,*,*,,,,,,,,*&@&@@@@@@@@@@@@@@&&%%&%@@&&&@&&&&%,,,,,,,,,,,,,,,,,,,,,,,,,"
	   2C 2C 2C 2C 2A
	   2C 2A 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2A 26 40 26 40
	   40 40 40 40 40
	   40 40 40 40 40
	   40 40 40 26 26
	   25 25 26 25 40
	   40 26 26 26 40
	   26 26 26 26 25
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
	   2C 2C 2C 2C 2C
 00000784  20 20 20 20 20		 BYTE "                                                                                "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 000007D4  20 20 20 20 20		 BYTE "                                                                                "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 00000824  20 20 20 20 20		 BYTE "                             Press Any Key To Start                             "
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 50
	   72 65 73 73 20
	   41 6E 79 20 4B
	   65 79 20 54 6F
	   20 53 74 61 72
	   74 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
 00000874 00000000		outputHandle    DWORD ?
 00000878 004A 0014		carInit COORD <74, 20>	; starting coordinate
 0000087C 004B 0014		carUpperBound COORD <75,20>
 00000880 002D 0014		carLowerBound COORD <45, 20>
 00000884 0000 0000		carPos COORD <0, 0>		; position of cursor
 00000888 0000 0000		obstaclePos1 COORD <0, 0>
 0000088C 0000 0000		obstaclePos2 COORD <0, 0>
 00000890 0000 0000		obstaclePos3 COORD <0, 0>
 00000894 00000001		cursorInfo CONSOLE_CURSOR_INFO <1, TRUE> ; set cursor size to 1 and visibility to FALSE (block cursor)
	   00000001
 0000089C 20 5F 5F 5F 5F	block1 BYTE " ______ "
	   5F 5F 20
 000008A4  2F 3D 3D 20 20		   BYTE	"/==  ==\"
	   3D 3D 5C
 000008AC  7C 5B 5F 5F 5F		   BYTE	"|[____]|"
	   5F 5D 7C
 000008B4  7C 7C 20 20 20		   BYTE	"||    ||"
	   20 7C 7C
 000008BC  7C 7C 5F 5F 5F		   BYTE	"||____||"
	   5F 7C 7C
 000008C4  21 5F 5F 5F 5F		   BYTE	"!______!"
	   5F 5F 21
 000008CC 23			road BYTE "#"
 000008CD 00000000		count DWORD 0
 000008D1 0053 0000		rightRoadPos COORD <83, 0>
 000008D5 002C 0000		leftRoadPos COORD <44, 0>
 000008D9 0096 0064		dwSize COORD <150, 100>
 000008DD 0064			timer word 100;
 000008DF 00			checkForOb byte 0
 000008E0 00			counter byte 0
 000008E1 00000000		score DWORD 0

 000008E5 0000 0000 0000	sysTime SYSTEMTIME <>   ; SYSTEMTIME structure to hold system time
	   0000 0000 0000
	   0000 0000
 000008F5 00			check byte 0

 = start@0			main EQU start@0
 00000000			.code
 00000000			main PROC

				; Get the Console standard output handle:
					INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000007  A3 00000874 R		mov outputHandle, eax
					
					; Set the cursor size and visibility


				; Set the start page
 0000000C  B9 0000001B			mov ecx, 27
 00000011			Start_Page: 
 00000011  51				push ecx
 00000012  BE 0000001B			mov esi, 27
 00000017  2B F1			sub esi, ecx
 00000019  6B F6 50			imul esi, graphWidth
 0000001C  B8 00000004 R		mov eax, offset list
 00000021  03 C6			add eax, esi
					INVOKE WriteConsoleOutputCharacter,
					   outputHandle,	; console output handle
					   eax,	; pointer to the top box line
					   graphWidth ,	; size of box line
					   PagePos,	; coordinates of first char
					   addr count	; output count
 0000003C  66| 83 05			add PagePos.y, 1
	   00000002 R 01
 00000044  59				pop ecx 
 00000045  E2 CA			loop Start_Page
					Invoke Sleep, 1000
 00000051  E8 00000000 E		call ReadChar
					
				; set the starting position	
 00000056			INITIAL:
 00000056  66| A1			mov ax, carInit.x
	   00000878 R
 0000005C  66| A3			mov carPos.x, ax
	   00000884 R
 00000062  66| A1			mov ax, carInit.y
	   0000087A R
 00000068  66| A3			mov carPos.y, ax
	   00000886 R
					INVOKE SetConsoleScreenBufferSize,
						outputHandle, ; handle to screen buffer
						dwSize; new screen buffer size

 0000007F				Obstacle:
 0000007F  E8 00000000 E			call Randomize
 00000084  E8 0000023B				call SetObstacle1
 00000089  E8 00000268				call SetObstacle2
 0000008E  E8 00000295				call SetObstacle3

 00000093			timeline:
					INVOKE GetLocalTime, ADDR sysTime   ; Get the current system time
 0000009D  0F B7 05			movzx eax, sysTime.wMilliseconds  ; Load milliseconds part of the time
	   000008F3 R
 000000A4  BA 00000000			mov edx,0
 000000A9  66| F7 35			div timer
	   000008DD R
 000000B0  83 FA 32			cmp edx, 50         ; Check if milliseconds >= 50
					;mov eax, edx
					;call WriteInt
 000000B3  7C DE			jl timeline        ; Jump back if less than 50

 000000B5			START:
 000000B5  E8 00000000 E		call ClrScr

					;print Road================================================
 000000BA  51				push ecx
 000000BB  B9 00000000			mov ecx, 0
 000000C0  66| 8B 0D			mov cx, dwSize.y
	   000008DB R
 000000C7  66| C7 05			mov rightRoadPos.y, 0
	   000008D3 R
	   0000
 000000D0  66| C7 05			mov leftRoadPos.y, 0
	   000008D7 R
	   0000
 000000D9			PrintRoad:
 000000D9  51				push ecx

					INVOKE WriteConsoleOutputCharacter,
					   outputHandle,	; console output handle
					   addr road,	; pointer to the top box line
					   roadWidth ,	; size of box line
					   rightRoadPos,	; coordinates of first char
					   addr count	; output count
					INVOKE WriteConsoleOutputCharacter,
					   outputHandle,	; console output handle
					   addr road,	; pointer to the top box line
					   roadWidth ,	; size of box line
					   leftRoadPos,	; coordinates of first char
					   addr count	; output count
 00000114  59				pop ecx
 00000115  66| FF 05			inc rightRoadPos.y  ; Increment the y-coordinate for the road
	   000008D3 R
 0000011C  66| FF 05			inc leftRoadPos.y  ; Increment the y-coordinate for the road
	   000008D7 R
 00000123  E2 B4			loop PrintRoad
 00000125  59				pop ecx
					;print Road==============================================================

					
 00000126			PrintCar:
					INVOKE PrintCarProc,
						carPos
					
 00000131			PrintObstacle1:
					INVOKE PrintCarProc,
						obstaclePos1
					
 0000013C			PrintObstacle2:
					INVOKE PrintCarProc,
						obstaclePos2
					
 00000147			PrintObstacle3:
					INVOKE PrintCarProc,
						obstaclePos3
					

 00000152			Speed:
 00000152  A0 000008E0 R		mov al, counter
 00000157  FE C0			inc al
 00000159  A2 000008E0 R		mov counter, al
					.IF counter == 2
 00000167  C6 05 000008E0 R			mov counter, 0
	   00
 0000016E  66| 83 05				add obstaclePos1.y, 1
	   0000088A R 01
 00000176  66| 83 05				add obstaclePos2.y, 1
	   0000088E R 01
 0000017E  66| 83 05				add obstaclePos3.y, 1
	   00000892 R 01
					.ENDIF

 00000186			CheckObstacle:
					.IF obstaclePos1.y == 25
 00000190  E8 0000012F				call SetObstacle1
					.ENDIF
					.IF obstaclePos2.y == 25
 0000019F  E8 00000152				call SetObstacle2
					.ENDIF
					.IF obstaclePos3.y == 25
 000001AE  E8 00000175				call SetObstacle3
					.ENDIF

 000001B3			TestCar:
					INVOKE CrashTest, obstaclePos1
					.IF ax == 1
 000001C4  E9 000000DD				jmp END_Page
					.ENDIF
					INVOKE CrashTest, obstaclePos2
					.IF ax == 1
 000001DA  E9 000000C7				jmp END_Page
					.ENDIF
					Invoke CrashTest, obstaclePos3
					.IF ax == 1
 000001F0  E9 000000B1				jmp END_Page
					.ENDIF
					

 000001F5			KBCheck:
					;detect move==============================================================
					.if check==0
 000001FE  E8 00000000 E			call ReadKey
						.IF ax == 4B00h ;LEFT ARROW
 00000209  C6 05 000008F5 R				mov check, 1
	   01
 00000210  66| 83 2D					sub carPos.x, 1
	   00000884 R 01
						.ENDIF
						.IF ax == 4d00h ;RIGHT ARROW
 0000021E  C6 05 000008F5 R				mov check, 1
	   01
 00000225  66| 83 05					add carPos.x, 1
	   00000884 R 01
						.ENDIF
						.IF ax == 011Bh ;ESC
 00000233  E9 00000085					jmp END_FUNC
						.ENDIF
					
 00000238  66| A1				mov ax, carLowerBound.x
	   00000880 R
						.IF carPos.x == ax ; x lowerbound
 00000247  66| 83 05					add carPos.x, 1
	   00000884 R 01
						.ENDIF
 0000024F  66| A1				mov ax, carUpperBound.x
	   0000087C R
						.IF carPos.x == ax ; x upperbound
 0000025E  66| 83 2D					sub carPos.x, 1
	   00000884 R 01
						.ENDIF
						.IF check==1
 0000026F  E9 FFFFFE41					jmp START
						.ENDIF
					.ENDIF
					;detect move===============================================================


 00000274			time_buffer:
					INVOKE GetLocalTime, ADDR                                             sysTime   ; Get the current system time
 0000027E  0F B7 05			movzx eax, sysTime.wMilliseconds  ; Load milliseconds part of the time
	   000008F3 R
 00000285  BA 00000000			mov edx,0
 0000028A  66| F7 35			div timer
	   000008DD R
 00000291  83 FA 32			cmp edx, 50         ; Check if milliseconds >= 49
 00000294  0F 8D FFFFFF5B		jge KBCheck
 0000029A  C6 05 000008F5 R		mov check, 0
	   00
 000002A1  E9 FFFFFDED			jmp timeline      ; Repeat 'count' times

 000002A6			END_Page:
 000002A6  E8 00000000 E		call ClrScr
 000002AB  66| 83 2D			sub PagePos.y, 28
	   00000002 R 1C
 000002B3  B9 0000001B			mov ecx, 27
 000002B8  E9 FFFFFD54			jmp Start_Page
 000002BD			END_FUNC:
					exit

 000002C4			SetObstacle1 PROC
 000002C4  66| 33 DB			xor bx, bx
 000002C7			SetObstacle1X:
 000002C7  66| B8 0018			mov ax, 24
 000002CB  E8 00000000 E		call RandomRange
 000002D0  66| 03 D8			add bx, ax
 000002D3  66| 83 FB 32			cmp	bx, 50
 000002D7  72 EE			jb SetObstacle1X
 000002D9  66| 89 1D			mov obstaclePos1.x, bx
	   00000888 R
 000002E0			SetObstacle1Y:
 000002E0  66| 33 DB			xor bx, bx
 000002E3  66| 8B 1D			mov bx, obstaclePos3.y
	   00000892 R
 000002EA  66| 83 EB 0F			sub bx, 15
 000002EE  66| 89 1D			mov obstaclePos1.y, bx
	   0000088A R

 000002F5  C3				ret
 000002F6			SetObstacle1 ENDP

 000002F6			SetObstacle2 PROC
 000002F6  66| 33 DB			xor bx, bx
 000002F9			SetObstacle2X:
 000002F9  66| B8 001E			mov ax, 30
 000002FD  E8 00000000 E		call RandomRange
 00000302  66| 03 D8			add bx, ax
 00000305  66| 83 FB 2D			cmp	bx, 45
 00000309  72 EE			jb SetObstacle2X
 0000030B  66| 89 1D			mov obstaclePos2.x, bx
	   0000088C R
 00000312			SetObstacle2Y:
 00000312  66| 33 DB			xor bx, bx
 00000315  66| 8B 1D			mov bx, obstaclePos1.y
	   0000088A R
 0000031C  66| 83 EB 14			sub bx, 20
 00000320  66| 89 1D			mov obstaclePos2.y, bx
	   0000088E R

 00000327  C3				ret
 00000328			SetObstacle2 ENDP

 00000328			SetObstacle3 PROC
 00000328  66| 33 DB			xor bx, bx
 0000032B			SetObstacle3X:
 0000032B  66| B8 001E			mov ax, 30
 0000032F  E8 00000000 E		call RandomRange
 00000334  66| 03 D8			add bx, ax
 00000337  66| 83 FB 2D			cmp	bx, 45
 0000033B  72 EE			jb SetObstacle3X
 0000033D  66| 89 1D			mov obstaclePos3.x, bx
	   00000890 R
 00000344			SetObstacle3Y:
 00000344  66| 33 DB			xor bx, bx
 00000347  66| 8B 1D			mov bx, obstaclePos2.y
	   0000088E R
 0000034E  66| 83 EB 14			sub bx, 20
 00000352  66| 89 1D			mov obstaclePos3.y, bx
	   00000892 R

 00000359  C3				ret
 0000035A			SetObstacle3 ENDP


 0000035A			main ENDP

 0000035A			PrintCarProc PROC USES eax esi ecx,
				    pos:COORD
				    
 00000360  B9 00000006			mov ecx, 6

 00000365			Print:
 00000365  51			    push ecx
 00000366  BE 00000006		    mov esi, 6
 0000036B  2B F1		    sub esi, ecx
 0000036D  6B F6 08		    imul esi, carWidth
 00000370  B8 0000089C R	    mov eax, offset block1
 00000375  03 C6		    add eax, esi
				    INVOKE WriteConsoleOutputCharacter,
				       outputHandle,    ; console output handle
				       eax,             ; pointer to the top box line
				       carWidth,        ; size of box line
				       pos,             ; coordinates of first char
				       addr count       ; output count

 0000038D  66| 83 45 0A		    add pos.y , 1
	   01
 00000392  59			    pop ecx
 00000393  E2 D0		    loop Print

 00000395  66| 83 6D 0A		    sub pos.y , 6 ; Adjust the y-coordinate
	   06
				    ret
 000003A1			PrintCarProc ENDP

 000003A1			CrashTest PROC USES esi ebx,
				    obstaclePos :COORD,

 000003A6  66| 8B 45 0A			mov ax, obstaclePos.y
 000003AA  66| 83 C0 05			add ax, 5
					.IF ax == carPos.y
 000003B7  66| 8B 45 08				mov ax, obstaclePos.x
 000003BB  66| 8B 1D				mov bx, carPos.x
	   00000884 R
 000003C2  66| 83 C3 07				add bx, 7
					.IF ax <= bx
 000003CB  66| 83 C0 07				add ax, 7
					.IF ax >= bx
 000003D4  66| B8 0001				mov ax, 1
						ret
					.ENDIF
					.ENDIF
					.ENDIF

 000003DE  66| 8B 45 0A			mov ax, obstaclePos.y
 000003E2  66| 83 C0 05			add ax, 5
					.IF ax == carPos.y
 000003EF  66| 8B 45 08				mov ax, obstaclePos.x
					.IF ax <= carPos.x
 000003FC  66| 83 C0 07				add ax, 7
					.IF ax >= carPos.x
 00000409  66| B8 0001				mov ax, 1
						ret
					.ENDIF
					.ENDIF
					.ENDIF

 00000413  66| 8B 45 08			mov ax, obstaclePos.x
 00000417  66| 83 C0 07			add ax, 7
					.IF ax == carPos.x
 00000424  66| 8B 45 0A				mov ax, obstaclePos.y
					.IF ax <= carPos.y
 00000431  66| 83 C0 05				add ax, 5
					.IF ax >= carPos.y
 0000043E  66| B8 0001				mov ax, 1
						ret
					.ENDIF
					.ENDIF
					.ENDIF

 00000448  66| A1			mov ax, carPos.x
	   00000884 R
 0000044E  66| 83 C0 07			add ax, 7
					.IF ax == obstaclePos.x
 00000458  66| A1				mov ax, carPos.y
	   00000886 R
					.IF ax >= obstaclePos.y
 00000464  66| 8B 5D 0A				mov bx, obstaclePos.y
 00000468  66| 83 C3 05				add bx, 5
					.IF ax <= bx
 00000471  66| B8 0001				mov ax, 1
						ret
					.ENDIF
					.ENDIF
					.ENDIF

 0000047B  66| 8B 45 08			mov ax, obstaclePos.x
 0000047F  66| 83 C0 07			add ax, 7
					.IF ax == carPos.x
 0000048C  66| 8B 45 0A				mov ax, obstaclePos.y
 00000490  66| 8B 1D				mov bx, carPos.y
	   00000886 R
 00000497  66| 83 C3 05				add bx, 5
					.IF ax <= bx
 000004A0  66| 83 C0 05				add ax, 5
					.IF ax >= bx
 000004A9  66| B8 0001				mov ax, 1
						ret
					.ENDIF
					.ENDIF
					.ENDIF

 000004B3  66| A1			mov ax, carPos.x
	   00000884 R
 000004B9  66| 83 C0 07			add ax, 7
					.IF ax == obstaclePos.x
 000004C3  66| A1				mov ax, carPos.y
	   00000886 R
 000004C9  66| 83 C0 05				add ax, 5
					.IF ax >= obstaclePos.y
 000004D3  66| 8B 5D 0A				mov bx, obstaclePos.y
 000004D7  66| 83 C3 05				add bx, 5
					.IF ax <= bx
 000004E0  66| B8 0001				mov ax, 1
						ret
					.ENDIF
					.ENDIF
					.ENDIF

					ret
 000004F0			CrashTest ENDP

				END main
Microsoft (R) Macro Assembler Version 14.37.32824.0	    01/08/24 17:27:24
test.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000008F6 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000004F0 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CrashTest  . . . . . . . . . . .	P Near	 000003A1 _TEXT	Length= 0000014F Public STDCALL
  obstaclePos  . . . . . . . . .	DWord	 bp + 00000008
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintCarProc . . . . . . . . . .	P Near	 0000035A _TEXT	Length= 00000047 Public STDCALL
  pos  . . . . . . . . . . . . .	DWord	 bp + 00000008
  Print  . . . . . . . . . . . .	L Near	 00000365 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetObstacle1 . . . . . . . . . .	P Near	 000002C4 _TEXT	Length= 00000032 Public STDCALL
  SetObstacle1X  . . . . . . . .	L Near	 000002C7 _TEXT	
  SetObstacle1Y  . . . . . . . .	L Near	 000002E0 _TEXT	
SetObstacle2 . . . . . . . . . .	P Near	 000002F6 _TEXT	Length= 00000032 Public STDCALL
  SetObstacle2X  . . . . . . . .	L Near	 000002F9 _TEXT	
  SetObstacle2Y  . . . . . . . .	L Near	 00000312 _TEXT	
SetObstacle3 . . . . . . . . . .	P Near	 00000328 _TEXT	Length= 00000032 Public STDCALL
  SetObstacle3X  . . . . . . . .	L Near	 0000032B _TEXT	
  SetObstacle3Y  . . . . . . . .	L Near	 00000344 _TEXT	
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
start@0  . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000035A Public STDCALL
  Start_Page . . . . . . . . . .	L Near	 00000011 _TEXT	
  INITIAL  . . . . . . . . . . .	L Near	 00000056 _TEXT	
  Obstacle . . . . . . . . . . .	L Near	 0000007F _TEXT	
  timeline . . . . . . . . . . .	L Near	 00000093 _TEXT	
  START  . . . . . . . . . . . .	L Near	 000000B5 _TEXT	
  PrintRoad  . . . . . . . . . .	L Near	 000000D9 _TEXT	
  PrintCar . . . . . . . . . . .	L Near	 00000126 _TEXT	
  PrintObstacle1 . . . . . . . .	L Near	 00000131 _TEXT	
  PrintObstacle2 . . . . . . . .	L Near	 0000013C _TEXT	
  PrintObstacle3 . . . . . . . .	L Near	 00000147 _TEXT	
  Speed  . . . . . . . . . . . .	L Near	 00000152 _TEXT	
  CheckObstacle  . . . . . . . .	L Near	 00000186 _TEXT	
  TestCar  . . . . . . . . . . .	L Near	 000001B3 _TEXT	
  KBCheck  . . . . . . . . . . .	L Near	 000001F5 _TEXT	
  time_buffer  . . . . . . . . .	L Near	 00000274 _TEXT	
  END_Page . . . . . . . . . . .	L Near	 000002A6 _TEXT	
  END_FUNC . . . . . . . . . . .	L Near	 000002BD _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
block1 . . . . . . . . . . . . .	Byte	 0000089C _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
carInit  . . . . . . . . . . . .	COORD	 00000878 _DATA	
carLowerBound  . . . . . . . . .	COORD	 00000880 _DATA	
carPos . . . . . . . . . . . . .	COORD	 00000884 _DATA	
carUpperBound  . . . . . . . . .	COORD	 0000087C _DATA	
carWidth . . . . . . . . . . . .	Number	 00000008h   
checkForOb . . . . . . . . . . .	Byte	 000008DF _DATA	
check  . . . . . . . . . . . . .	Byte	 000008F5 _DATA	
counter  . . . . . . . . . . . .	Byte	 000008E0 _DATA	
count  . . . . . . . . . . . . .	DWord	 000008CD _DATA	
cursorInfo . . . . . . . . . . .	CONSOLE_CURSOR_INFO  00000894 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dwSize . . . . . . . . . . . . .	COORD	 000008D9 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
graphWidth . . . . . . . . . . .	Number	 00000050h   
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
leftRoadPos  . . . . . . . . . .	COORD	 000008D5 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
list . . . . . . . . . . . . . .	Byte	 00000004 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
main . . . . . . . . . . . . . .	Text   	 start@0
obstaclePos1 . . . . . . . . . .	COORD	 00000888 _DATA	
obstaclePos2 . . . . . . . . . .	COORD	 0000088C _DATA	
obstaclePos3 . . . . . . . . . .	COORD	 00000890 _DATA	
outputHandle . . . . . . . . . .	DWord	 00000874 _DATA	
pagePos  . . . . . . . . . . . .	COORD	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rightRoadPos . . . . . . . . . .	COORD	 000008D1 _DATA	
roadWidth  . . . . . . . . . . .	Number	 00000001h   
road . . . . . . . . . . . . . .	Byte	 000008CC _DATA	
score  . . . . . . . . . . . . .	DWord	 000008E1 _DATA	
sysTime  . . . . . . . . . . . .	SYSTEMTIME  000008E5 _DATA	
timer  . . . . . . . . . . . . .	Word	 000008DD _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
